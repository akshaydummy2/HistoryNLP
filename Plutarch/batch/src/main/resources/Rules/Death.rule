// Find PERSON of length 1-4 words
$PERSON = "( ( [ { ner:PERSON } ] ) ( [ { ner:PERSON } ] ) ( [ { ner:PERSON } ] ) ( [ { ner:PERSON } ] ) | ( [ { ner:PERSON } ] ) ( [ { ner:PERSON } ] ) ( [ { ner:PERSON } ] ) | ( [ { ner:PERSON } ] ) ( [ { ner:PERSON } ] ) | ( [ { ner:PERSON } ] ) )"

// Find DATE of length 1-4 words
$DATE = "( ( [ { ner:DATE } ] ) ( [ { ner:DATE } ] ) ( [ { ner:DATE } ] ) ( [ { ner:DATE } ] ) | ( [ { ner:DATE } ] ) ( [ { ner:DATE } ] ) ( [ { ner:DATE } ] ) | ( [ { ner:DATE } ] ) ( [ { ner:DATE } ] ) | ( [ { ner:DATE } ] ) )"

// Find LOCATION of length 1-4 words
$LOCATION = "( ( [ { ner:LOCATION } ] ) ( [ { ner:LOCATION } ] ) ( [ { ner:LOCATION } ] ) ( [ { ner:LOCATION } ] ) | ( [ { ner:LOCATION } ] ) ( [ { ner:LOCATION } ] ) ( [ { ner:LOCATION } ] ) | ( [ { ner:LOCATION } ] ) ( [ { ner:LOCATION } ] ) | ( [ { ner:LOCATION } ] ) )"

// Find LOCATION of length 1-4 words
$ORG = "( ( [ { ner:ORGANIZATION } ] ) ( [ { ner:ORGANIZATION } ] ) ( [ { ner:ORGANIZATION } ] ) ( [ { ner:ORGANIZATION } ] ) | ( [ { ner:ORGANIZATION } ] ) ( [ { ner:ORGANIZATION } ] ) ( [ { ner:ORGANIZATION } ] ) | ( [ { ner:ORGANIZATION } ] ) ( [ { ner:ORGANIZATION } ] ) | ( [ { ner:ORGANIZATION } ] ) )"

// Find any tokens from none to many
$ANYTOKEN = "[]{0,}?"

// person, died/killed, date, location, org
{
  // ruleType is "text", "tokens", "composite", or "filter"
  ruleType: "tokens",

  // PERSON follow with date range within parenthesis
  pattern: ( $PERSON $ANYTOKEN /died|killed/ $ANYTOKEN $DATE $ANYTOKEN $LOCATION $ANYTOKEN $ORG ),

  // resulting phrase type
  result: "Death"
}

// person, died/killed, location, date, org
{
  // ruleType is "text", "tokens", "composite", or "filter"
  ruleType: "tokens",

  // PERSON follow with date range within parenthesis
  pattern: ( $PERSON $ANYTOKEN /died|killed/ $ANYTOKEN $LOCATION $ANYTOKEN $DATE $ANYTOKEN $ORG ),

  // resulting phrase type
  result: "Death"
}

// person, died/killed, date, location
{
  // ruleType is "text", "tokens", "composite", or "filter"
  ruleType: "tokens",

  // PERSON follow with date range within parenthesis
  pattern: ( $PERSON $ANYTOKEN /died|killed/ $ANYTOKEN $DATE $ANYTOKEN $LOCATION ),

  // resulting phrase type
  result: "Death"
}

// person, died/killed, location, date
{
  // ruleType is "text", "tokens", "composite", or "filter"
  ruleType: "tokens",

  // PERSON follow with date range within parenthesis
  pattern: ( $PERSON $ANYTOKEN /died|killed/ $ANYTOKEN $LOCATION $ANYTOKEN $DATE ),

  // resulting phrase type
  result: "Death"
}

// person, died/killed, date
{
  // ruleType is "text", "tokens", "composite", or "filter"
  ruleType: "tokens",

  // PERSON follow with date range within parenthesis
  pattern: ( $PERSON $ANYTOKEN /died|killed/ $ANYTOKEN $DATE ),

  // resulting phrase type
  result: "Death"
}
